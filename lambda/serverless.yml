service: uassign-api

provider:
  name: aws
  runtime: nodejs12.x
  environment:
    NODE_ENV: dev
    DOMAIN_SUFFIX: space
  apiGateway:
    binaryMediaTypes:
      - 'application/zip'
  iamRoleStatements:
    - Effect: Allow
      Action:
        - 's3:GetObject'
        - 's3:PutObject'
      Resource:
        Fn::Join: ['', [Fn::GetAtt: [S3Bucket, Arn], '/*']]

plugins:
  - serverless-plugin-typescript
  - serverless-offline
  - serverless-apigateway-service-proxy
  - serverless-binary-cors
package:
  include:
    - .env

functions:
  addNote:
    handler: app/handler.addNote
    events:
      - http:
          path: notes
          method: post
          cors: true
  updateNote:
    handler: app/handler.updateNote
    events:
      - http:
          path: notes/{id}
          method: put
          cors: true
  deleteNote:
    handler: app/handler.deleteNote
    events:
      - http:
          path: notes/{id}
          method: delete
          cors: true
  getNote:
    handler: app/handler.getNote
    events:
      - http:
          path: notes/{id}
          method: get
          cors: true
  getAllNotes:
    handler: app/handler.getAllNotes
    events:
      - http:
          path: notes
          method: get
          cors: true
  getUser:
    handler: app/handlers/user.get
    events:
      - http:
          path: user
          method: post
          cors: true
  getAllUsers:
    handler: app/handlers/user.getAll
    events:
      - http:
          path: user
          method: get
          cors: true
  getAllUsersPublic:
    handler: app/handlers/user.getAllPublic
    events:
      - http:
          path: user/public
          method: get
          cors: true
  getAllUsersProfPublic:
    handler: app/handlers/user.getAllProfPublic
    events:
      - http:
          path: user/public/prof
          method: get
          cors: true
  getMe:
    handler: app/handlers/user.me
    events:
      - http:
          path: user/me
          method: get
          cors: true
  updateMe:
    handler: app/handlers/user.updateMe
    events:
      - http:
          path: user/me
          method: patch
          cors: true
  addAdmin:
    handler: app/handlers/user.addAdmin
    events:
      - http:
          path: user/admin
          method: post
          cors: true
  removeAdmin:
    handler: app/handlers/user.removeAdmin
    events:
      - http:
          path: user/admin
          method: delete
          cors: true
  addProf:
    handler: app/handlers/user.addProf
    events:
      - http:
          path: user/prof
          method: post
          cors: true
  removeProf:
    handler: app/handlers/user.removeProf
    events:
      - http:
          path: user/prof
          method: delete
          cors: true
  addCourse:
    handler: app/handlers/course.addCourse
    events:
      - http:
          path: course
          method: post
          cors: true
  updateCourse:
    handler: app/handlers/course.updateCourse
    events:
      - http:
          path: course/{id}
          method: patch
          cors: true
  deleteCourse:
    handler: app/handlers/course.deleteCourse
    events:
      - http:
          path: course/{id}
          method: delete
          cors: true
  getCourse:
    handler: app/handlers/course.getCourse
    events:
      - http:
          path: course/{id}
          method: get
          cors: true
  getAllCourses:
    handler: app/handlers/course.getAll
    events:
      - http:
          path: course
          method: get
          cors: true
  getAllProfCourses:
    handler: app/handlers/course.getAllProf
    events:
      - http:
          path: course/prof
          method: get
          cors: true
  getAllStudentCourses:
    handler: app/handlers/course.getAllStudent
    events:
      - http:
          path: course/student
          method: get
          cors: true
  getAllAssociatedCourses:
    handler: app/handlers/course.getAllAssociated
    events:
      - http:
          path: course/associated
          method: get
          cors: true
  addAssignment:
    handler: app/handlers/assignment.addAssignment
    events:
      - http:
          path: assign
          method: post
          cors: true
  updateAssignment:
    handler: app/handlers/assignment.updateAssignment
    events:
      - http:
          path: assign/{id}
          method: put
          cors: true
  deleteAssignment:
    handler: app/handlers/assignment.deleteAssignment
    events:
      - http:
          path: assign/{id}
          method: delete
          cors: true
  getAssignment:
    handler: app/handlers/assignment.getAssignment
    events:
      - http:
          path: assign/{id}
          method: get
          cors: true
  getAllAssignments:
    handler: app/handlers/assignment.getAll
    events:
      - http:
          path: assign
          method: get
          cors: true
  getAllCourseAssignments:
    handler: app/handlers/assignment.getAllCourseAssigns
    events:
      - http:
          path: assign/course/{id}
          method: get
          cors: true
  getMyAssigns:
    handler: app/handlers/assignment.getMyAssigns
    events:
      - http:
          path: assign/me
          method: get
          cors: true
  getAllSubmissions:
    handler: app/handlers/submission.getAll
    events:
      - http:
          path: assign/submissions/all
          method: get
          cors: true
  getAssignSubmissions:
    handler: app/handlers/submission.getAssignmentSubmissions
    events:
      - http:
          path: assign/submissions/{id}
          method: get
          cors: true
  getMySubmission:
    handler: app/handlers/submission.getMySubmission
    events:
      - http:
          path: assign/sub/{assignmentId}
          method: get
          cors: true
  submit:
    handler: app/handlers/submission.submit
    events:
      - http:
          path: assign/sub/{id}
          method: put
          cors: true
  grade:
    handler: app/handlers/submission.grade
    events:
      - http:
          path: assign/sub/{id}
          method: patch
          cors: true
  deleteAssignSubmissions:
    handler: app/handlers/submission.deleteAssignmentSubmissions
    events:
      - http:
          path: assign/submissions/{id}
          method: delete
          cors: true
  signedGetUrl:
    handler: app/handlers/file.signedGetUrl
    events:
      - http:
          path: fileGetUrl
          method: post
          cors: true
  signedPutUrl:
    handler: app/handlers/file.signedPutUrl
    events:
      - http:
          path: filePutUrl
          method: post
          cors: true
  submissionGetAuth:
    handler: app/handlers/file.submissionGetAuth
  submissionModifyAuth:
    handler: app/handlers/file.submissionModifyAuth
  submissionCreated:
    handler: app/handlers/file.submissionCreated
    events:
      - s3:
        bucket:
          Ref: S3Bucket
        event: s3:ObjectCreated:*
        rules:
          - prefix: s3/submissions
  submissionRemoved:
    handler: app/handlers/file.submissionRemoved
    events:
      - s3:
        bucket:
          Ref: S3Bucket
        event: s3:ObjectRemoved:*
        rules:
          - prefix: s3/submissions

resources:
  Resources:
    serviceUserPool:
      Type: AWS::Cognito::UserPool
      Properties:
        UserPoolName: service-user-pool-${opt:stage, self:provider.stage}
        UsernameAttributes:
          - email
        AutoVerifiedAttributes:
          - email
    serviceUserPoolClient:
      Type: AWS::Cognito::UserPoolClient
      Properties:
        ClientName: service-user-pool-client-${opt:stage, self:provider.stage}
        AllowedOAuthFlows:
          - implicit
        AllowedOAuthFlowsUserPoolClient: true
        AllowedOAuthScopes:
          - phone
          - email
          - openid
          - profile
          - aws.cognito.signin.user.admin
        UserPoolId:
          Ref: serviceUserPool
        CallbackURLs:
          - https://localhost:3000
        ExplicitAuthFlows:
          - ALLOW_USER_SRP_AUTH
          - ALLOW_REFRESH_TOKEN_AUTH
        GenerateSecret: false
        SupportedIdentityProviders:
          - COGNITO
    serviceUserPoolDomain:
      Type: AWS::Cognito::UserPoolDomain
      Properties:
        UserPoolId:
          Ref: serviceUserPool
        Domain: service-user-pool-domain-${opt:stage, self:provider.stage}-${self:provider.environment.DOMAIN_SUFFIX}
    S3Bucket:
      Type: 'AWS::S3::Bucket'
      Properties:
        CorsConfiguration:
          CorsRules:
            - AllowedHeaders: ['*']
              AllowedMethods: [GET, PUT]
              AllowedOrigins: ['*']
              Id: UAssignDevS3Cors
              MaxAge: '3600'
